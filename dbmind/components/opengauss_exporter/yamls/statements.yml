# Copyright (c) 2022 Huawei Technologies Co.,Ltd.
#
# openGauss is licensed under Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#
#          http://license.coscl.org.cn/MulanPSL2
#
# THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.

pg_sql_statement_history:
  name: pg_sql_statement_history
  desc: openGauss history query statement history
  query:
    - name: pg_sql_statement_history
      sql: "
  with HS as (select H.unique_query_id, H.debug_query_id,
        H.db_name AS datname,
        H.schema_name AS SCHEMA,
      H.query,
      H.query_plan,
      (extract(epoch
                      FROM H.start_time) * 1000)::bigint as start_time,
      (extract(epoch
                      FROM H.finish_time) * 1000)::bigint as finish_time,
      extract(epoch
                      FROM H.finish_time - H.start_time) * 1000 AS exc_time,
      H.cpu_time,
      H.data_io_time,
          H.parse_time,
          H.plan_time,
          H.db_time,
      H.n_returned_rows,
      H.n_tuples_fetched,
      H.n_tuples_returned,
      H.n_tuples_inserted,
      H.n_tuples_updated,
      H.n_tuples_deleted,
      (H.n_blocks_hit / (H.n_blocks_fetched+0.01)) AS hit_rate,
      (H.n_blocks_fetched / (H.n_blocks_hit+0.01)) AS fetch_rate,
      H.lock_wait_count,
      H.lwlock_wait_count,
      S.n_calls,
      S.sort_count / S.n_calls AS sort_count,
            S.sort_mem_used / S.n_calls AS sort_mem_used,
            S.sort_spill_count / S.n_calls AS sort_spill_count,
            S.hash_count / S.n_calls AS hash_count,
            S.hash_mem_used / S.n_calls AS hash_mem_used,
            S.hash_spill_count / S.n_calls AS hash_spill_count
  FROM dbe_perf.statement_history H inner join dbe_perf.statement S
  on H.unique_query_id = S.unique_sql_id
  WHERE lower(H.query) similar to ('%((select)|(delete)|(insert)|(update)|(merge))%')
    AND lower(H.query) not similar to ('%((dbe_perf)|(pg_))%')
    AND H.application_name NOT IN ('gs_clean', 'DBMind-openGauss-exporter')
    AND S.n_calls > 1
    AND H.finish_time > (now() - interval '{scrape_interval_seconds} seconds')
    )
    SELECT * FROM (SELECT unique_query_id, count(1) FROM HS GROUP BY unique_query_id) count_view
        INNER JOIN (
            SELECT *, row_number() over (PARTITION BY unique_query_id ORDER BY exc_time DESC) as rn
            FROM HS
            ) sample_view
        ON count_view.unique_query_id = sample_view.unique_query_id WHERE sample_view.rn = 1;
"
      version: '>=0.0.0'
      timeout: 9
      status: enable
  metrics:
    - name: datname
      description: Name of database
      usage: LABEL
    - name: schema
      description: Name of schema
      usage: LABEL
    - name: start_time
      description: start executing time
      usage: LABEL
    - name: finish_time
      description: finish executing time
      usage: LABEL
    - name: query
      description: query text
      usage: LABEL
    - name: query_plan
      description: query plan text
      usage: LABEL
    - name: unique_query_id
      description: unique query id
      usage: LABEL
    - name: debug_query_id
      description: debug query id
      usage: LABEL
    - name: n_returned_rows
      description: select returned rows
      usage: LABEL
    - name: n_tuples_returned
      description: n tuples return
      usage: LABEL
    - name: n_tuples_fetched
      description: select fetch rows
      usage: LABEL
    - name: n_tuples_inserted
      description: insert tuples
      usage: LABEL
    - name: n_tuples_updated
      description: update tuples
      usage: LABEL
    - name: n_tuples_deleted
      description: delete tuples
      usage: LABEL
    - name: hit_rate
      description: hit ratio
      usage: LABEL
    - name: fetch_rate
      description: fetch rate
      usage: LABEL
    - name: lock_wait_count
      description: lock wait count
      usage: LABEL
    - name: lwlock_wait_count
      description: lwclock wait count
      usage: LABEL
    - name: cpu_time
      description: cpu time
      usage: LABEL
    - name: data_io_time
      description: data_io_time
      usage: LABEL
    - name: plan_time
      description: plan time
      usage: LABEL
    - name: parse_time
      description: parse time
      usage: LABEL
    - name: db_time
      description: db time
      usage: LABEL
    - name: exc_time
      description: time taken to execute
      usage: GAUGE
    - name: n_calls
      description: the number of calls
      usage: LABEL
    - name: sort_count
      description: sort count
      usage: LABEL
    - name: sort_mem_used
      description: sort mem used
      usage: LABEL
    - name: sort_spill_count
      description: sort spill count
      usage: LABEL
    - name: hash_count
      description: hash count
      usage: LABEL
    - name: hash_mem_used
      description: hash mem used
      usage: LABEL
    - name: hash_spill_count
      description: hash spill count
      usage: LABEL
    - name: count
      description: count how many same queries we research
      usage: LABEL
  status: enable
  ttl: 0
  timeout: 9


pg_sql_statement_full:
  name: pg_sql_statement_full
  desc: Extract full SQL statements from openGauss, which is a sampling process.
  query:
    - name: pg_sql_statement_full
      sql: "
  SELECT   count(1),
           datname,
           application_name,
           query
  FROM     pg_stat_activity
  WHERE    application_name NOT IN ('Asp',
                                    'statement flush thread',
                                    'JobScheduler',
                                    'WDRSnapshot',
                                    'PercentileJob',
                                    'gs_clean',
                                    'DBMind-openGauss-exporter')
  AND      pg_current_sessid() != sessionid
  AND      query ilike '%FROM%'
  AND      (
                    query_start > now() - interval '{scrape_interval_seconds} seconds')
  AND state != 'idle'
  GROUP BY datname,
           application_name,
           query;
      "
      version: '>=0.0.0'
      timeout: 9
      status: disable
  metrics:
    - name: count
      description: count
      usage: GAUGE
    - name: datname
      description: Name of database
      usage: LABEL
    - name: application_name
      description: Name of applacation
      usage: LABEL
    - name: query
      description: SQL statement
      usage: LABEL
  status: disable
  ttl: 0
  timeout: 9


pg_sql_statement_statistics:
  name: pg_sql_statement_statistics
  desc: Extract TOP SQL statements from openGauss.
  query:
    - name: pg_sql_statement_statistics
      sql: |-
        WITH db_time_top10 AS (SELECT node_name,
                                      unique_sql_id,
                                      lower(regexp_replace(dbe_perf.STATEMENT.query, E'[\\n\\r\\s]+', ' ', 'g')) as query,
                                      n_calls,
                                      db_time,
                                      sort_spill_count,
                                      hash_spill_count
                               FROM dbe_perf.STATEMENT
                               WHERE n_calls > 1
                                 AND query similar to ('%((select)|(delete)|(insert)|(update)|(merge))%')
                                 AND query not similar to ('%((dbe_perf)|(pg_))%')
                               ORDER BY db_time DESC
                               limit 10),
             n_calls_top10 AS (SELECT node_name,
                                      unique_sql_id,
                                      lower(regexp_replace(dbe_perf.STATEMENT.query, E'[\\n\\r\\s]+', ' ', 'g')) as query,
                                      n_calls,
                                      db_time,
                                      sort_spill_count,
                                      hash_spill_count
                               FROM dbe_perf.STATEMENT
                               WHERE n_calls > 1
                                 AND query similar to ('%((select)|(delete)|(insert)|(update)|(merge))%')
                                 AND query not similar to ('%((dbe_perf)|(pg_))%')
                               ORDER BY n_calls DESC
                               limit 10)
        SELECT *
        FROM db_time_top10
        UNION
        SELECT *
        FROM n_calls_top10;
      version: '>=0.0.0'
      timeout: 9
      status: enable
  metrics:
    - name: node_name
      description: Name of node
      usage: LABEL
    - name: unique_sql_id
      description: unique SQL id
      usage: LABEL
    - name: query
      description: query text
      usage: LABEL
    - name: n_calls
      description: query plan text
      usage: GAUGE
    - name: db_time
      description: unique query id
      usage: GAUGE
    - name: sort_spill_count
      description: sort_spill_count
      usage: GAUGE
    - name: hash_spill_count
      description: hash_spill_count
      usage: GAUGE
  status: enable
  ttl: 10
  timeout: 9
